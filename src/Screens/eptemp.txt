import React, { useState, useRef } from "react";
import {
  View,
  Text,
  StyleSheet,
  FlatList,
  Image,
  Dimensions,
  TouchableOpacity,
  TextInput,
  Button,
} from "react-native";
import Icon from "react-native-vector-icons/FontAwesome";
import Modal from "react-native-modal";

const initialData = [
  {
    id: "1",
    title: "Lebron and Curry",
    timestamp: 300,
    username: "lebrongoat",
    videoUri: "https://www.youtube.com/watch?v=wgVOgGLtPtc&ab_channel=NBA",
    thumbnail:
      "https://cdn.vox-cdn.com/thumbor/RgKKALcRqv7p-AJTd3O-bJTBLr4=/0x30:4014x2706/1200x800/filters:focal(0x30:4014x2706)/cdn.vox-cdn.com/uploads/chorus_image/image/49894465/usa-today-9339378.0.jpg",
    likeCount: 110,
    comments: ["fraud", "not the goat", "L"],
  },
  {
    id: "2",
    title: "Jayson Tatum Dunking",
    timestamp: 15,
    username: "tatumgoat",
    videoUri: "https://www.example.com/video2.mp4",
    thumbnail:
      "https://assets.apnews.com/0b/92/8816a2bc817bba08164ebe9444ab/e8853552f3e0418ca5f0938ea63b43e7",
    likeCount: 110,
    comments: ["goat", "so sexy", "banner #18"],
  },
  // Add more posts as needed
];

const ExplorePage = () => {
  const [data, setData] = useState(initialData);
  const [votes, setVotes] = useState({});
  const [isModalVisible, setModalVisible] = useState(false);
  const [selectedPost, setSelectedPost] = useState(null);
  const [newComment, setNewComment] = useState("");
  const commentListRef = useRef(null);

  const processTime = (timeStamp) => {
    if (timeStamp >= 60) {
      if (timeStamp / 60 === 1) {
        return "1 hour ago";
      } else {
        return timeStamp / 60 + " hours ago";
      }
    } else {
      if (timeStamp === 1) {
        return "1 minute ago";
      } else {
        return timeStamp + " minutes ago";
      }
    }
  };

  const handleVote = (id, type) => {
    setVotes((prevVotes) => {
      const currentVote = prevVotes[id];
      const newVotes = {
        ...prevVotes,
        [id]: currentVote === type ? null : type,
      };

      setData((prevData) => {
        return prevData.map((post) => {
          if (post.id === id) {
            let likeCount = post.likeCount;
            if (type === "upvote") {
              if (currentVote === "downvote") {
                likeCount = likeCount + 2;
              } else if (currentVote === "upvote") {
                likeCount = likeCount - 1;
              } else {
                likeCount = likeCount + 1;
              }
            } else if (type === "downvote") {
              if (currentVote === "downvote") {
                likeCount = likeCount + 1;
              } else if (currentVote === "upvote") {
                likeCount = likeCount - 2;
              } else {
                likeCount = likeCount - 1;
              }
            }
            return { ...post, likeCount };
          }
          return post;
        });
      });

      return newVotes;
    });
  };

  const handleOpenComments = (post) => {
    setSelectedPost(post);
    setModalVisible(true);
  };

  const handleAddComment = () => {
    if (newComment.trim()) {
      setData((prevData) => {
        const newData = prevData.map((post) => {
          if (post.id === selectedPost.id) {
            const updatedPost = {
              ...post,
              comments: [...post.comments, newComment],
            };
            setSelectedPost(updatedPost);
            return updatedPost;
          }
          return post;
        });
        return newData;
      });

      setNewComment("");

      // Scroll to the end of the FlatList
      setTimeout(() => {
        if (commentListRef.current) {
          commentListRef.current.scrollToEnd({ animated: true });
        }
      }, 100); // delay to ensure state update is complete
    }
  };

  const renderItem = ({ item }) => {
    const voteStatus = votes[item.id];
    return (
      <View style={styles.postContainer}>
        <Image source={{ uri: item.thumbnail }} style={styles.thumbnail} />
        <Text style={styles.title}>{item.title}</Text>
        <Text style={styles.username}>@{item.username}</Text>
        <Text style={styles.timeStamp}>{processTime(item.timestamp)}</Text>
        <View style={styles.voteBar}>
          <TouchableOpacity
            style={styles.voteButton}
            onPress={() => handleVote(item.id, "upvote")}
          >
            <Icon
              name="arrow-up"
              size={24}
              color={voteStatus === "upvote" ? "#000" : "#666"}
            />
          </TouchableOpacity>
          <TouchableOpacity
            style={styles.voteButton}
            onPress={() => handleVote(item.id, "downvote")}
          >
            <Icon
              name="arrow-down"
              size={24}
              color={voteStatus === "downvote" ? "#000" : "#666"}
            />
          </TouchableOpacity>
          <Text style={styles.likeCount}>{item.likeCount} </Text>
          <TouchableOpacity
            style={styles.commentButton}
            onPress={() => handleOpenComments(item)}
          >
            <Icon name="comment" size={24} color="#666" />
          </TouchableOpacity>
        </View>
      </View>
    );
  };

  return (
    <View style={{ flex: 1 }}>
      <FlatList
        data={data}
        renderItem={renderItem}
        keyExtractor={(item) => item.id}
        pagingEnabled
        showsVerticalScrollIndicator={false}
        snapToAlignment="start"
        decelerationRate="fast"
      />

      <Modal
        isVisible={isModalVisible}
        onBackdropPress={() => setModalVisible(false)}
        style={styles.modal}
      >
        <View style={styles.modalContent}>
          <Text style={styles.modalTitle}>Comments</Text>
          <FlatList
            ref={commentListRef}
            data={selectedPost?.comments || []}
            renderItem={({ item }) => (
              <Text style={styles.comment}>{item}</Text>
            )}
            keyExtractor={(item, index) => index.toString()}
            style={styles.commentList}
          />
          <TextInput
            style={styles.commentInput}
            value={newComment}
            onChangeText={setNewComment}
            placeholder="Add a comment..."
          />
          <Button
            color="black"
            title="Add Comment"
            onPress={handleAddComment}
          />
        </View>
      </Modal>
    </View>
  );
};

const styles = StyleSheet.create({
  postContainer: {
    height: Dimensions.get("window").height,
    justifyContent: "center",
    alignItems: "center",
    borderBottomWidth: 1,
    borderTopWidth: 1,
    padding: 20,
  },
  thumbnail: {
    width: "100%",
    height: "70%",
    borderRadius: 15,
  },
  title: {
    fontSize: 15,
    fontWeight: "bold",
    color: "#333",
    position: "absolute",
    top: 80,
    left: 20,
    textShadowColor: "rgba(0, 0, 0, 0.4)",
    textShadowOffset: { width: -1, height: 1 },
    textShadowRadius: 10,
  },
  timeStamp: {
    fontSize: 15,
    fontWeight: "300",
    color: "#333",
    position: "absolute",
    top: 80,
    right: 20,
    textShadowColor: "rgba(0, 0, 0, 0.4)",
    textShadowOffset: { width: -1, height: 1 },
    textShadowRadius: 10,
  },
  username: {
    fontSize: 15,
    fontWeight: "300",
    color: "#333",
    position: "absolute",
    top: 102,
    left: 22,
    textShadowColor: "rgba(0, 0, 0, 0.5)",
    textShadowOffset: { width: -1, height: 1 },
    textShadowRadius: 10,
  },
  likeCount: {
    fontSize: 15,
    fontWeight: "300",
    color: "#333",
    padding: 15,
    textShadowColor: "rgba(0, 0, 0, 0.5)",
    textShadowOffset: { width: -1, height: 1 },
    textShadowRadius: 10,
  },
  voteBar: {
    position: "absolute",
    bottom: 80,
    flexDirection: "row",
    justifyContent: "space-around",
    width: "100%",
    paddingHorizontal: 20,
  },
  voteButton: {
    padding: 10,
  },
  commentButton: {
    padding: 10,
    marginLeft: "auto",
  },
  modal: {
    justifyContent: "flex-end",
    margin: 0,
  },
  modalContent: {
    backgroundColor: "white",
    padding: 20,
    borderTopLeftRadius: 20,
    borderTopRightRadius: 20,
    maxHeight: "70%",
  },
  modalTitle: {
    fontSize: 18,
    fontWeight: "bold",
    marginBottom: 10,
  },
  comment: {
    padding: 10,
    borderBottomWidth: 1,
    borderBottomColor: "#ddd",
  },
  commentInput: {
    borderWidth: 1,
    borderColor: "#d3d3d3",
    padding: 10,
    marginBottom: 10,
  },
  commentList: {
    flexGrow: 0,
  },
});

export default ExplorePage;
